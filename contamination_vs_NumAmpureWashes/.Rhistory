cast.all[J('0','1'), C1_color:="#3EC53E"]
cast.all[, C1_image:="no fluor."]
cast.all[J('1','1'), C1_image:="yellow"]
cast.all[J('1','0'), C1_image:="red"]
cast.all[J('0','0'), C1_image:="blue"]
cast.all[J('0','1'), C1_image:="green"]
spliced.ref <- data.table(chrom=rep("",nrow(junctionReads.sam)),
pos=as.double(rep(0,nrow(junctionReads.sam))),
pnext=rep(0,nrow(junctionReads.sam)),
gene_id=rep("",nrow(junctionReads.sam)),
qname=rep("", nrow(junctionReads.sam)))
require(data.table)
spliced.ref <- data.table(chrom=rep("",nrow(junctionReads.sam)),
pos=as.double(rep(0,nrow(junctionReads.sam))),
pnext=rep(0,nrow(junctionReads.sam)),
gene_id=rep("",nrow(junctionReads.sam)),
qname=rep("", nrow(junctionReads.sam)))
x<-data.table(chrom=rep("",10),pos=rep(0,10),pnext=rep(0.0,10))
x[,class(pos)]
x[,class(pnext)]
x[,class(as.integer(pnext))]
x[,mode(pnext)]
x[,mode(as.integer(pnext))]
x[,class(as.integer(pnext))]
x[,class(as.double(pnext))]
x[,mode(as.double(pnext))]
require(data.table)
split.bed <- fread("~/quakestor/isoform_analysis/test_split.bed")
head(split.bed)
split.bed[,len=V3-V2]
split.bed[,len:=V3-V2]
hist(split.bed[,len])
?hist
require(ggplot2)
ggplot(split.bed,aes(x=len,y=log10(..count..)))+geom_hist()
ggplot(split.bed,aes(x=len,y=log10(..count..)))+geom_histogram()
rm(split.bed)
gc()
ggplot(split.bed,aes(x=len,y=..count..))+geom_histogram()+
scale_y_log10()
split.bed <- fread("~/quakestor/isoform_analysis/test_split.bed")
split.bed[,len:=V3-V2]
hist(split.bed[,len])
require(ggplot2)
ggplot(split.bed,aes(x=len,y=..count..))+geom_histogram()+
scale_y_log10()
require(data.table)
merfish=fread("~/Downloads/140genesData.csv")
head(merfish)
merfish=merfish[,1:10,with=F]
head(merfish)
?data.table
merfish[,sum_ex:=sum(Exact_Match),by=Cell_ID]
merfish[,.(sum_ex,sum_corr):=.(sum(Exact_Match), sum(Corrected_Match)),by=Cell_ID]
merfish[,list(sum_ex,sum_corr):=list(sum(Exact_Match), sum(Corrected_Match)),by=Cell_ID]
counts=merfish[,sum_cor:=sum(Corrected_Match), by=Cell_ID]
counts=merfish[,sum_ex:=sum(Exact_Match), by=Cell_ID]
merfish[,sum_ex:=sum(Exact_Match), by=Cell_ID]
merfish[,sum_cor:=sum(Corrected_Match), by=Cell_ID]
head(merfish)
merfish[,sum_ex:=sum(Exact_Match), by=list(Cell_ID,Gene_Name)]
head(merfish)
merfish[,sum_cor:=sum(Corrected_Match), by=list(Cell_ID,Gene_Name)]
head(merfish)
require(ggplot2)
merfish[,ex_cor_rat:=sum_ex/sum_cor]
merfish[,var_ex:=var(sum_ex),by=Gene_Name]
head(merfish)
ggplot(merfish) + geom_histogram(aes(x=ex_cor_rat,y=..count..))
ggplot(merfish) + geom_histogram(aes(x=log2(ex_cor_rat),y=..count..))
ggplot(merfish) + geom_histogram(aes(x=log10(ex_cor_rat),y=..count..))
ggplot(merfish) + geom_histogram(aes(x=ex_cor_rat,y=..count..))+scale_x_log10()
merfish[,gene_ex_cor_ratio:=sum(ex_cor_rat),by=Gene_Name]
ggplot(merfish) + geom_histogram(aes(x=gene_ex_cor_ratio,y=..count..))+scale_x_log10()
merfish[,gene_ex_cor_ratio:=mean(ex_cor_rat),by=Gene_Name]
ggplot(merfish) + geom_histogram(aes(x=gene_ex_cor_ratio,y=..count..))+scale_x_log10()
mean_ex_cors = unique(merfish[,list(Gene_Name,gene_ex_cor_rat)])
mean_ex_cors = unique(merfish[,list(Gene_Name,gene_ex_cor_ratio)])
ggplot(mean_ex_cors) + geom_histogram(aes(x=gene_ex_cor_ratio,y=..count..))+scale_x_log10()
ggplot(mean_ex_cors) + geom_histogram(aes(x=gene_ex_cor_ratio,y=..count..),binwidth=range/20)+scale_x_log10()
ggplot(mean_ex_cors) + geom_histogram(aes(x=gene_ex_cor_ratio,y=..count..))+scale_x_log10(binwidth=range/20)
merfish[,mean_ex:=mean(sum_ex),by=Gene_Name]
merfish[,mean_cor:=mean(sum_cor),by=Gene_Name]
mean_ex_cors = unique(merfish[,list(Gene_Name,gene_ex_cor_ratio,mean_ex,mean_cor)])
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=gene_ex_cor_ratio)) + geom_point()
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=gene_ex_cor_ratio)) + geom_point() + scale_x_log10()
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=gene_ex_cor_ratio)) + geom_point() + scale_x_log10() + scale_y_log10()
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=gene_ex_cor_ratio)) + geom_point() + scale_x_log10()
mean_ex_cors[gene_ex_cor_ratio>0.7,]
merfish[,ex_frac:=sum_ex/(sum_ex+sum_cor+0.001)]
merfish[,mean_ex_frac:=mean(ex_frac),by=Gene_Name]
mean_ex_cors = unique(merfish[,list(Gene_Name,mean_ex_frac,mean_ex,mean_cor)])
ggplot(mean_ex_cors) + geom_histogram(aes(x=mean_ex_frac,y=..count..))+scale_x_log10()
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=mean_ex_frac)) + geom_point() + scale_x_log10()
View(merfish)
merfish[,var_cor:=var(sum_cor),by=Gene_Name]
ggplot(mean_ex_cors,aes(x=mean_ex,y=mean_cor)) + geom_point() + scale_x_log10() + scale_y_log10()
merfish[,probe_type:="gene"]
merfish[Gene_Name %like% "blank",probe_type:="blank"]
mean_ex_cors = unique(merfish[,list(Gene_Name,mean_ex_frac,mean_ex,mean_cor,probe_type)])
View(mean_ex_cors)
ggplot(mean_ex_cors) + geom_histogram(aes(x=mean_ex_frac,y=..count.., color=probe_type))+scale_x_log10()
ggplot(mean_ex_cors) + geom_histogram(aes(x=mean_ex_frac,y=..count..,fill=probe_type))+scale_x_log10()
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=mean_ex_frac,color=probe_type)) + geom_point() + scale_x_log10()
ggplot(mean_ex_cors) + geom_histogram(aes(x=mean_ex_frac,y=..count..,fill=probe_type))+scale_x_log10()+theme_bw()
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=mean_ex_frac,color=probe_type)) + geom_point() + scale_x_log10() +theme_bw()
merfish[Gene_Name %like% "notarget",probe_type:="no target"]
mean_ex_cors = unique(merfish[,list(Gene_Name,mean_ex_frac,mean_ex,mean_cor,probe_type)])
ggplot(mean_ex_cors) + geom_histogram(aes(x=mean_ex_frac,y=..count..,fill=probe_type))+scale_x_log10()+theme_bw()
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=mean_ex_frac,color=probe_type)) + geom_point() + scale_x_log10() +theme_bw()
ggplot(mean_ex_cors,aes(x=mean_ex,y=mean_cor)) + geom_point() + scale_x_log10() + scale_y_log10()
ggplot(mean_ex_cors,aes(x=mean_ex,y=mean_cor,color=probe_type)) + geom_point() + scale_x_log10() + scale_y_log10()
merfish[,reads_per_cell:=sum(Exact_Match + Corrected_Match), by=Cell_ID]
rpc=unique(merfish[,list(reads_per_cell,Cell_ID)])
ggplot(rpc) + geom_histogram(aes(x=reads_per_cell,y=..count..)) + theme_bw()
ggplot(rpc) + geom_histogram(aes(x=reads_per_cell,y=..count..)) + theme_bw() + scale_x_log10()
ggplot(rpc) + geom_histogram(aes(x=reads_per_cell,y=..count..)) + theme_bw()
ggplot(mean_ex_cors) + geom_histogram(aes(x=mean_ex_frac,y=..count..,fill=probe_type))+scale_x_log10()+theme_bw() + geom_vline(xintercept=1/16)
ggplot(mean_ex_cors) + geom_histogram(aes(x=mean_ex_frac,y=..count..,fill=probe_type))+scale_x_log10()+theme_bw() + geom_vline(xintercept=1/16,
color="red")
ggplot(mean_ex_cors,aes(x=mean_ex+mean_cor,y=mean_ex_frac,color=probe_type)) + geom_point() + scale_x_log10() +theme_bw() + geom_hline(yintercept=1/16,
color="red")
load("~/quakestor/NeuronExp/finaldataset_analysis/kharchenko_allCells_BTN1-35-OGC1-4")
names(dist.mm10)
summary(dist.mm10-)
summary(dist.mm10)
load("~/quakestor/NeuronExp/cellname_info_BTN1-35-OGC1-4.RData")
length(cellname.info[experiment=="BTN1",])
cellname.info
require(data.table)
cellname.info
length(cellname.info[experiment=="BTN1",])
nrow(cellname.info[experiment=="BTN1",])
msn.stats <- fread("AdultMouseStriatum.msn_d1d2corrGenes.tsv")
data.cluster1 <- data.tsne[cluster==1]
d1.pure <- intersect(msn.stats[D2 < 0.4,cell_name],msn.stats[D1>0.4,cell_name])
data.d1 <- data.cluster1[cell_name %in% d1.pure]
# data.d1 <- data.d1[experiment!="BTN22"]
data.d1[,cell.name:=cell_name]; data.d1[,log10.cpm:=log10_cpm]
data.d1 <- data.d1[,.(cell.name,log10.cpm,gene,experiment,experiment_color)]
gc()
source("~/singlecell-pipeline/rnaseq_funcs_V2.R")
base::matrix
base::matrix()
100 %% 384
400 %% 384
100 %% 384 - 100
floor((100/384))
floor((400/384))
floor((500/384))
floor((800/384))
ceiling((800/384))
ceiling((200/384))
ceiling((400/384))
setwd('~/Downloads/')
dispense = read.csv('LibraryDilutions_Mantis_Mosquito_96to384 - p1_mantisBufferExport.csv')
dispense
dispense$row = substr(dispense$Position, 1, 1)
dispense$col = substr(dispense$Position, 2, 3)
dispense
require(reshape2)
out.p1 = dcast(dispense, row ~ col, value.var = 'Volume.EB.ul')
out.p1
out.p1 = out.p1[, 2:ncol(out.p1)]
out.p1
dispense$col = as.numeric(dispense$col)
out.p1 = dcast(dispense, row ~ col, value.var = 'Volume.EB.ul')
out.p1
out.p1 = out.p1[, 2:ncol(out.p1)]
out.p1 = dcast(dispense, row ~ col, value.var = 'Volume.EB.ul')
out.p1.2 = out.p1[, 2:ncol(out.p1)]
out.p1.2
write.table(out.p1.2, file = "/Volumes/NO NAME/Mantis_p1_table.txt", sep = '/t',
quote = F, row.names = F, col.names = F)
write.table(out.p1.2, file = "/Volumes/NO NAME/Mantis_p1_table.txt", sep = '\t',
quote = F, row.names = F, col.names = F)
dispense = read.csv('LibraryDilutions_Mantis_Mosquito_96to384 - p2_mantisBufferExport.csv')
dispense$row = substr(dispense$Position, 1, 1)
dispense$col = substr(dispense$Position, 2, 3)
dispense$col = as.numeric(dispense$col)
out.p2 = dcast(dispense, row ~ col, value.var = 'Volume.EB.ul')
out.p2.2 = out.p2[, 2:ncol(out.p2)]
write.table(out.p2.2, file = "/Volumes/NO NAME/Mantis_p2_table.txt", sep = '\t',
quote = F, row.names = F, col.names = F)
require(data.table)
bycol=fread('~/Downloads/LibraryDilutions_Mantis_Mosquito_96to384 - Barcodes_AltRows_byCol.csv')
bycol[, row:=substr(Well,1,1)]
bycol[, col:=substr(Well,2,3)]
bycol
bycol.rev=copy(bycol)
bycol.rev=as.data.frame(bycol)
bycol.rev
head(bycol.rev)
rows <- unique(bycol.rev$row)
rows
seq(A:P)
seq('A':'P')
rows <- data.frame(row=unique(bycol$row), rev=reverse(unique(bycol$row)))
rows <- data.frame(row=unique(bycol$row), rev=rev(unique(bycol$row)))
rows
bycol.rev <- merge(bycol.rev, rows, by = 'row')
rows <- data.frame(row=unique(bycol$row), row.rev=rev(unique(bycol$row)))
bycol.rev <- merge(bycol.rev, rows, by = 'row')
bycol.rev=as.data.frame(bycol)
head(bycol.rev)
rows <- data.frame(row=unique(bycol$row), row.rev=rev(unique(bycol$row)))
bycol.rev <- merge(bycol.rev, rows, by = 'row')
cols <- data.frame(col=unique(bycol$col), col.rev=rev(unique(bycol$col)))
cols
bycol.rev <- merge(bycol.rev, rows, by = 'row')
bycol.rev=as.data.frame(bycol)
head(bycol.rev)
rows <- data.frame(row=unique(bycol$row), row.rev=rev(unique(bycol$row)))
cols <- data.frame(col=unique(bycol$col), col.rev=rev(unique(bycol$col)))
bycol.rev <- merge(bycol.rev, rows, by = 'row')
bycol.rev <- merge(bycol.rev, cols, by = 'col')
head(bycol.rev)
bycol.rev <- bycol.rev[order(bycol.rev$Well), ]
bycol.rev
?seq
?rep
paste0(rows$row, cols$col)
paste0(rep(rows$row, 16), cols$col)
paste0(rows$row, rep(cols$col, 16))
paste0(rep(cols$col, 16), rows$row)
rows$row
rep(rows$row, times = rep(24,16))
paste0(rep(rows$row, times = rep(24,16)), cols$col)
rowcols.colorder <- paste0(rep(rows$row, times = rep(24,16)), cols$col)
match(bycol.rev$Well, rowcols.colorder)
bycol.rev <- bycol.rev[match(bycol.rev$Well, rowcols.colorder), ]
bycol.rev
match(bycol.rev$Well, rowcols.colorder)
?match
bycol.rev=as.data.frame(bycol)
head(bycol.rev)
rows <- data.frame(row=unique(bycol$row), row.rev=rev(unique(bycol$row)))
cols <- data.frame(col=unique(bycol$col), col.rev=rev(unique(bycol$col)))
bycol.rev <- merge(bycol.rev, rows, by = 'row')
bycol.rev <- merge(bycol.rev, cols, by = 'col')
<- bycol.rev[order(bycol.rev$Well), ]
rowcols.colorder <- paste0(rep(rows$row, times = rep(24,16)), cols$col)
bycol.rev <- bycol.rev[match(rowcols.colorder, bycol.rev$Well), ]
bycol.rev
bycol.rev[, Well.rev := paste0(row.rev, col.rev)]
bycol.rev$Well.rev<- with(bycol.rev, paste0(row.rev, col.rev))
head(bycol.rev)
out <- bycol.rev[, c(Barcode, Index, Well.rev)]
out <- bycol.rev[, c('Barcode', 'Index', 'Well.rev')]
out
out <- out[match(rowcols.colorder, out$Well.rev), ]
colnames(out) <- c('Barcode', 'Index', 'Well')
out
write.table(out, file = '~/Google Drive/singlecell_expts/OGC/libraries/OGC8_24_D1_170725/reversedBarcodePlate.txt',
sep = '\t', row.names = F)
rm(list=ls()
rm(list=ls())
setwd('~/singlecell-pipeline/striatumCocaine/v3_analysis/')
load('qc/striatumCocaine_OGC06_25_170706.stats.RData')
stats
stats.good=stats[numreads>100000][num.genes>1000]
require(cowplot)
View(stats.good)
stats.good[, plate := 'old']
stats.good[grepl("N[0-9][0-9][0-9]Barcode"), plate := 'new']
stats.good[grepl("N[0-9][0-9][0-9]Barcode", cell.name), plate := 'new']
ggplot(stats.good, aes(num.genes, log10(numreads), color = plate))+
geom_point()
stats.good[, plate := substr(cell.name, regexpr("IL[0-9]",cell.name), regexpr("IL[0-9]",cell.name)+6)]
stats.good[grepl("N[0-9][0-9][0-9]Barcode", cell.name), plate := 'new']
unique(stats.good[, plate])
stats.good[, plate := substr(cell.name, regexpr("IL[0-9]",cell.name), regexpr("IL[0-9]",cell.name)+5)]
stats.good[grepl("N[0-9][0-9][0-9]Barcode", cell.name), plate := 'new']
unique(stats.good[, plate])
ggplot(stats.good, aes(num.genes, log10(numreads), color = plate))+
geom_point()
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_histogram()
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot()
ggplot(stats.good, aes(plate, numreads, fill = plate))+
geom_boxplot()
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot()
with(stats.good, cor.test(log10(numreads), num.genes))
ggplot(stats.good, aes(log10(num.genes), log10(numreads), color = plate))+
geom_point()
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot()
with(stats.good, cor.test(log10(numreads), num.genes))
ggplot(stats.good, aes(plate, numgenes, fill = plate))+
geom_boxplot()
ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot()
stats.good[grepl("N[0-9][0-9][0-9]Barcode", cell.name),
plate := substr(cell.name, regexpr("N4[0-9][0-9]",cell.name), regexpr("N4[0-9][0-9]",cell.name)+3)]
unique(stats.good[, plate])
ggplot(stats.good, aes(num.genes, log10(numreads), color = plate))+
geom_point()
ggplot(stats.good, aes(log10(num.genes), log10(numreads), color = plate))+
geom_point()
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot()
ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot()
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(x.axis.text = element_blank())
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank())
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), axis.title.x=element_blank())
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), axis.title.x=element_blank())
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), axis.label.x=element_blank())
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank())
p2=ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot()
p=plot_grid(p1,p2,align = 'h')
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none') +
p2=ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot()
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none')
ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none')
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none')
p2=ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot() +
theme(legend.position = 'none')
p=plot_grid(p1,p2,align = 'h', nrow = 2)
p
ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot() +
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1))
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf')
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=2, base_height = 3.5)
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none')
p2=ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot() +
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1))
p=plot_grid(p1,p2,align = 'h', nrow = 2)
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=2, base_height = 3.5)
p=plot_grid(p1,p2,align = 'hv', nrow = 2)
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=2, base_height = 3.5)
stats.good[,.(cor(num.genes, log10(numreads))), by = .(plate)]
ggplot(stats.good[,.(cor(num.genes, log10(numreads))), by = .(plate)],
aes(plate, V1, fill = plate)) +
geom_bar(stat = 'identity')
ggplot(stats.good[,.(cor(num.genes, log10(numreads)), log10(numreads)), by = .(plate)],
aes(V2, V1, fill = plate)) +
geom_bar(stat = 'identity') +
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1))
ggplot(stats.good[,.(cor(num.genes, log10(numreads)), log10(numreads)), by = .(plate)],
aes(V2, V1, fill = plate)) +
geom_point()
ggplot(stats.good[,.(cor(num.genes, median(numreads)), log10(numreads)), by = .(plate)],
aes(V2, V1, fill = plate)) +
geom_point()
ggplot(stats.good[,.(cor(num.genes, log10(numreads)), median(numreads)), by = .(plate)],
aes(V2, V1, fill = plate)) +
geom_point()
ggplot(stats.good[,.(cor(num.genes, log10(numreads)), median(numreads)), by = .(plate)],
aes(log10(V2), V1, fill = plate)) +
geom_point()
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none')
p2=ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot() +
theme(legend.position = 'none', axis.text.x = element_blank())
p3=ggplot(stats.good[,.(cor(num.genes, log10(numreads))), by = .(plate)],
aes(plate, V1, fill = plate)) +
geom_bar()+
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1))
p=plot_grid(p1,p2,p3,align = 'hv', nrow = 3)
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=3, base_height = 3.5)
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none')
p2=ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot() +
theme(legend.position = 'none', axis.text.x = element_blank())
p3=ggplot(stats.good[,.(cor(num.genes, log10(numreads))), by = .(plate)],
aes(plate, V1, fill = plate)) +
geom_bar(stat = 'identity')+
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1))
p=plot_grid(p1,p2,p3,align = 'hv', nrow = 3)
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=3, base_height = 3.5)
p3=ggplot(stats.good[,.(cor(num.genes, log10(numreads), method = 'spearman')), by = .(plate)],
aes(plate, V1, fill = plate)) +
geom_bar(stat = 'identity')+
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1)) +
ylab('Cor (Num.genes ~ num.reads)')
geom_point()
p1=ggplot(stats.good, aes(plate, log10(numreads), fill = plate))+
geom_boxplot() +
theme(axis.text.x = element_blank(), legend.position = 'none')
p2=ggplot(stats.good, aes(plate, num.genes, fill = plate))+
geom_boxplot() +
theme(legend.position = 'none', axis.text.x = element_blank())
p3=ggplot(stats.good[,.(cor(num.genes, log10(numreads), method = 'spearman')), by = .(plate)],
aes(plate, V1, fill = plate)) +
geom_bar(stat = 'identity')+
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1)) +
ylab('Spearman Cor (Num.genes ~ num.reads)')
p=plot_grid(p1,p2,p3,align = 'hv', nrow = 3)
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=3, base_height = 3.5)
p=plot_grid(p1,p2,p3,align = 'hv', nrow = 3, labels = c(NULL, NULL, 'Cor of num. reads and num. genes'))
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=3, base_height = 3.5)
p=plot_grid(p1,p2,p3,align = 'hv', nrow = 3, labels = c('', '', 'Cor of num. reads and num. genes'))
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=3, base_height = 3.5)
p3=ggplot(stats.good[,.(cor(num.genes, log10(numreads), method = 'spearman')), by = .(plate)],
aes(plate, V1, fill = plate)) +
geom_bar(stat = 'identity')+
theme(legend.position = 'none', axis.text.x = element_text(angle=45, hjust=1)) +
ylab('Spearman Cor')
p=plot_grid(p1,p2,p3,align = 'hv', nrow = 3, labels = c('', '', 'Cor of num. reads and num. genes'))
save_plot(file = 'qc/numgenes_numreads_byPlate.pdf', p, nrow=3, base_height = 3.5)
rm(list=ls())
require(data.table)
require(cowplot)
require(lattice)
setwd('~/singlecell-pipeline/mHSC/subtype_xContamination_analysis/contamination_vs_NumAmpureWashes/')
load('data/fetal_venule_exp1_HS.ReadsPerGene.matrix.RData')
load('data/fetal_venule_exp1_NS.ReadsPerGene.matrix.RData')
cell.info.NS = data.table(cell.name = rownames(mat.NextSeq.2r),
numreads = rowSums(mat.NextSeq.2r),
numgenes = rowSums(mat.NextSeq.2r>0))
cell.info.NS[, seq.well := substr(cell.name, regexpr("_", cell.name)+1, nchar(cell.name))]
cell.info.NS[, row := substr(seq.well, 1, 1)]
cell.info.NS[, col := substr(seq.well, 2, 3)]
cell.info.NS = dt.HiSeq.2r[, .(sum(counts), sum(counts > 0)), by = 'cell.name']
setnames(cell.info.HS, c('numreads', 'numgenes', 'cell.name'))
rm(list=ls())
require(data.table)
require(cowplot)
require(lattice)
setwd('~/singlecell-pipeline/mHSC/subtype_xContamination_analysis/contamination_vs_NumAmpureWashes/')
load('data/fetal_venule_exp1_HS.ReadsPerGene.matrix.RData')
mat.HiSeq.2r = copy(mat)
rm(mat)
load('data/fetal_venule_exp1_NS.ReadsPerGene.matrix.RData')
mat.NextSeq.2r = copy(mat)
rm(mat)
cell.info.NS = data.table(cell.name = rownames(mat.NextSeq.2r),
numreads = rowSums(mat.NextSeq.2r),
numgenes = rowSums(mat.NextSeq.2r>0))
cell.info.NS[, seq.well := substr(cell.name, regexpr("_", cell.name)+1, nchar(cell.name))]
cell.info.NS[, row := substr(seq.well, 1, 1)]
cell.info.NS[, col := substr(seq.well, 2, 3)]
cell.info.NS = dt.HiSeq.2r[, .(sum(counts), sum(counts > 0)), by = 'cell.name']
setnames(cell.info.HS, c('numreads', 'numgenes', 'cell.name'))
cell.info.HS[, seq.well := substr(cell.name, regexpr("_", cell.name)+1, nchar(cell.name))]
cell.info.HS[, row := substr(seq.well, 1, 1)]
cell.info.HS[, col := substr(seq.well, 2, 3)]
cell.info.NS = data.table(cell.name = rownames(mat.NextSeq.2r),
numreads = rowSums(mat.NextSeq.2r),
numgenes = rowSums(mat.NextSeq.2r>0))
cell.info.NS[, seq.well := substr(cell.name, regexpr("_", cell.name)+1, nchar(cell.name))]
cell.info.NS[, row := substr(seq.well, 1, 1)]
cell.info.NS[, col := substr(seq.well, 2, 3)]
cell.info.NS
fv.p1.info=fread('data/fetal_venule_exp1_plateLayout1.csv')
fv.p1.info
fv.p1.info=melt(fread('data/fetal_venule_exp1_plateLayout1.csv'))
fv.p1.info
fv.p1.info=fread('data/fetal_venule_exp1_plateLayout1.csv')
fv.p1.info
fv.p1.info=fread('data/fetal_venule_exp1_plateLayout1.csv', header = T)
fv.p1.info
fv.p1.info=melt(fread('data/fetal_venule_exp1_plateLayout1.csv', header = T))
fv.p1.info
require(tidyr)
require(dplyr)
require(tidyr)
spread(fv.p1.info)
gather(fv.p1.info)
head(gather(fv.p1.info))
?gather
head(gather(as.data.frame(fv.p1.info)))
head(gather(fv.p1.info, row))
head(gather(fv.p1.info, row))
head(gather(fv.p1.info))
head(gather(fv.p1.info, row, column))
head(gather(fv.p1.info, row))
head(gather(fv.p1.info, row, cell.name))
head(gather(fv.p1.info, column, cell.name))
head(gather(fv.p1.info, row, column, cell.name))
head(gather(fv.p1.info, row, cell.name))
tail(gather(fv.p1.info, row, cell.name))
tail(gather(fv.p1.info, column, row, cell.name))
tail(gather(fv.p1.info, column, row))
tail(gather(fv.p1.info, column, cell.name, -row))
data.table(gather(fv.p1.info, column, cell.name, -row))
fv.p1.info=fread('data/fetal_venule_exp1_plateLayout1.csv', header = T)
fv.p1.info=data.table(gather(fv.p1.info, column, cell.name, -row))
fv.p1.info=data.table(gather(fv.p1.info, column, cell.name.dil, -row))
